/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.openDocAPI.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(AuditGetapplysResApplyinfoBase.class, new TypeSelector<AuditGetapplysResApplyinfoBase>() {
            @Override
            public Class<? extends AuditGetapplysResApplyinfoBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuditGetapplysResApplyinfoBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("auditGetapplysResApplyinfoType1".toUpperCase(), AuditGetapplysResApplyinfoType1.class);
                    classByDiscriminatorValue.put("auditGetapplysResApplyinfoType2".toUpperCase(), AuditGetapplysResApplyinfoType2.class);
                    classByDiscriminatorValue.put("auditGetapplysResApplyinfoType3".toUpperCase(), AuditGetapplysResApplyinfoType3.class);
                    classByDiscriminatorValue.put("auditGetapplysResApplyinfoType5".toUpperCase(), AuditGetapplysResApplyinfoType5.class);
                    classByDiscriminatorValue.put("auditGetapplysResApplyinfoType6".toUpperCase(), AuditGetapplysResApplyinfoType6.class);
                    classByDiscriminatorValue.put("AuditGetapplysResApplyinfoBase".toUpperCase(), AuditGetapplysResApplyinfoBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AuditGetapplysResApplyinfoBase.class, new PostProcessor<AuditGetapplysResApplyinfoBase>() {
              @Override
              public void postDeserialize(AuditGetapplysResApplyinfoBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuditGetapplysResApplyinfoBase src, Gson gson) {
                  Map<Class<? extends AuditGetapplysResApplyinfoBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoType1.class, "auditGetapplysResApplyinfoType1");
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoType2.class, "auditGetapplysResApplyinfoType2");
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoType3.class, "auditGetapplysResApplyinfoType3");
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoType5.class, "auditGetapplysResApplyinfoType5");
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoType6.class, "auditGetapplysResApplyinfoType6");
                      discriminatorValueByClass.put(AuditGetapplysResApplyinfoBase.class, "AuditGetapplysResApplyinfoBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AuditGetpendingapprovalsResApplyinfoBase.class, new TypeSelector<AuditGetpendingapprovalsResApplyinfoBase>() {
            @Override
            public Class<? extends AuditGetpendingapprovalsResApplyinfoBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuditGetpendingapprovalsResApplyinfoBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("auditGetpendingapprovalsResApplyinfoType1".toUpperCase(), AuditGetpendingapprovalsResApplyinfoType1.class);
                    classByDiscriminatorValue.put("auditGetpendingapprovalsResApplyinfoType2".toUpperCase(), AuditGetpendingapprovalsResApplyinfoType2.class);
                    classByDiscriminatorValue.put("auditGetpendingapprovalsResApplyinfoType3".toUpperCase(), AuditGetpendingapprovalsResApplyinfoType3.class);
                    classByDiscriminatorValue.put("auditGetpendingapprovalsResApplyinfoType5".toUpperCase(), AuditGetpendingapprovalsResApplyinfoType5.class);
                    classByDiscriminatorValue.put("auditGetpendingapprovalsResApplyinfoType6".toUpperCase(), AuditGetpendingapprovalsResApplyinfoType6.class);
                    classByDiscriminatorValue.put("AuditGetpendingapprovalsResApplyinfoBase".toUpperCase(), AuditGetpendingapprovalsResApplyinfoBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AuditGetpendingapprovalsResApplyinfoBase.class, new PostProcessor<AuditGetpendingapprovalsResApplyinfoBase>() {
              @Override
              public void postDeserialize(AuditGetpendingapprovalsResApplyinfoBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuditGetpendingapprovalsResApplyinfoBase src, Gson gson) {
                  Map<Class<? extends AuditGetpendingapprovalsResApplyinfoBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoType1.class, "auditGetpendingapprovalsResApplyinfoType1");
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoType2.class, "auditGetpendingapprovalsResApplyinfoType2");
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoType3.class, "auditGetpendingapprovalsResApplyinfoType3");
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoType5.class, "auditGetpendingapprovalsResApplyinfoType5");
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoType6.class, "auditGetpendingapprovalsResApplyinfoType6");
                      discriminatorValueByClass.put(AuditGetpendingapprovalsResApplyinfoBase.class, "AuditGetpendingapprovalsResApplyinfoBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AuditGetshareapplyhistoryResApplyinfoBase.class, new TypeSelector<AuditGetshareapplyhistoryResApplyinfoBase>() {
            @Override
            public Class<? extends AuditGetshareapplyhistoryResApplyinfoBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuditGetshareapplyhistoryResApplyinfoBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("auditGetshareapplyhistoryResApplyinfoType1".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoType1.class);
                    classByDiscriminatorValue.put("auditGetshareapplyhistoryResApplyinfoType2".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoType2.class);
                    classByDiscriminatorValue.put("auditGetshareapplyhistoryResApplyinfoType3".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoType3.class);
                    classByDiscriminatorValue.put("auditGetshareapplyhistoryResApplyinfoType5".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoType5.class);
                    classByDiscriminatorValue.put("auditGetshareapplyhistoryResApplyinfoType6".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoType6.class);
                    classByDiscriminatorValue.put("AuditGetshareapplyhistoryResApplyinfoBase".toUpperCase(), AuditGetshareapplyhistoryResApplyinfoBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AuditGetshareapplyhistoryResApplyinfoBase.class, new PostProcessor<AuditGetshareapplyhistoryResApplyinfoBase>() {
              @Override
              public void postDeserialize(AuditGetshareapplyhistoryResApplyinfoBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuditGetshareapplyhistoryResApplyinfoBase src, Gson gson) {
                  Map<Class<? extends AuditGetshareapplyhistoryResApplyinfoBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoType1.class, "auditGetshareapplyhistoryResApplyinfoType1");
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoType2.class, "auditGetshareapplyhistoryResApplyinfoType2");
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoType3.class, "auditGetshareapplyhistoryResApplyinfoType3");
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoType5.class, "auditGetshareapplyhistoryResApplyinfoType5");
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoType6.class, "auditGetshareapplyhistoryResApplyinfoType6");
                      discriminatorValueByClass.put(AuditGetshareapplyhistoryResApplyinfoBase.class, "AuditGetshareapplyhistoryResApplyinfoBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(AuditGetshareapprovehistoryResApplyinfoBase.class, new TypeSelector<AuditGetshareapprovehistoryResApplyinfoBase>() {
            @Override
            public Class<? extends AuditGetshareapprovehistoryResApplyinfoBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AuditGetshareapprovehistoryResApplyinfoBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("auditGetshareapprovehistoryResApplyinfoType1".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoType1.class);
                    classByDiscriminatorValue.put("auditGetshareapprovehistoryResApplyinfoType2".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoType2.class);
                    classByDiscriminatorValue.put("auditGetshareapprovehistoryResApplyinfoType3".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoType3.class);
                    classByDiscriminatorValue.put("auditGetshareapprovehistoryResApplyinfoType5".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoType5.class);
                    classByDiscriminatorValue.put("auditGetshareapprovehistoryResApplyinfoType6".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoType6.class);
                    classByDiscriminatorValue.put("AuditGetshareapprovehistoryResApplyinfoBase".toUpperCase(), AuditGetshareapprovehistoryResApplyinfoBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AuditGetshareapprovehistoryResApplyinfoBase.class, new PostProcessor<AuditGetshareapprovehistoryResApplyinfoBase>() {
              @Override
              public void postDeserialize(AuditGetshareapprovehistoryResApplyinfoBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AuditGetshareapprovehistoryResApplyinfoBase src, Gson gson) {
                  Map<Class<? extends AuditGetshareapprovehistoryResApplyinfoBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoType1.class, "auditGetshareapprovehistoryResApplyinfoType1");
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoType2.class, "auditGetshareapprovehistoryResApplyinfoType2");
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoType3.class, "auditGetshareapprovehistoryResApplyinfoType3");
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoType5.class, "auditGetshareapprovehistoryResApplyinfoType5");
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoType6.class, "auditGetshareapprovehistoryResApplyinfoType6");
                      discriminatorValueByClass.put(AuditGetshareapprovehistoryResApplyinfoBase.class, "AuditGetshareapprovehistoryResApplyinfoBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(MessageGetResMsgBase.class, new TypeSelector<MessageGetResMsgBase>() {
            @Override
            public Class<? extends MessageGetResMsgBase> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends MessageGetResMsgBase>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("messageGetResMsgType1".toUpperCase(), MessageGetResMsgType1.class);
                    classByDiscriminatorValue.put("messageGetResMsgType10".toUpperCase(), MessageGetResMsgType10.class);
                    classByDiscriminatorValue.put("messageGetResMsgType11".toUpperCase(), MessageGetResMsgType11.class);
                    classByDiscriminatorValue.put("messageGetResMsgType12".toUpperCase(), MessageGetResMsgType12.class);
                    classByDiscriminatorValue.put("messageGetResMsgType13".toUpperCase(), MessageGetResMsgType13.class);
                    classByDiscriminatorValue.put("messageGetResMsgType14".toUpperCase(), MessageGetResMsgType14.class);
                    classByDiscriminatorValue.put("messageGetResMsgType15".toUpperCase(), MessageGetResMsgType15.class);
                    classByDiscriminatorValue.put("messageGetResMsgType16".toUpperCase(), MessageGetResMsgType16.class);
                    classByDiscriminatorValue.put("messageGetResMsgType17".toUpperCase(), MessageGetResMsgType17.class);
                    classByDiscriminatorValue.put("messageGetResMsgType18".toUpperCase(), MessageGetResMsgType18.class);
                    classByDiscriminatorValue.put("messageGetResMsgType19".toUpperCase(), MessageGetResMsgType19.class);
                    classByDiscriminatorValue.put("messageGetResMsgType2".toUpperCase(), MessageGetResMsgType2.class);
                    classByDiscriminatorValue.put("messageGetResMsgType20".toUpperCase(), MessageGetResMsgType20.class);
                    classByDiscriminatorValue.put("messageGetResMsgType21".toUpperCase(), MessageGetResMsgType21.class);
                    classByDiscriminatorValue.put("messageGetResMsgType22".toUpperCase(), MessageGetResMsgType22.class);
                    classByDiscriminatorValue.put("messageGetResMsgType23".toUpperCase(), MessageGetResMsgType23.class);
                    classByDiscriminatorValue.put("messageGetResMsgType24".toUpperCase(), MessageGetResMsgType24.class);
                    classByDiscriminatorValue.put("messageGetResMsgType25".toUpperCase(), MessageGetResMsgType25.class);
                    classByDiscriminatorValue.put("messageGetResMsgType26".toUpperCase(), MessageGetResMsgType26.class);
                    classByDiscriminatorValue.put("messageGetResMsgType27".toUpperCase(), MessageGetResMsgType27.class);
                    classByDiscriminatorValue.put("messageGetResMsgType28".toUpperCase(), MessageGetResMsgType28.class);
                    classByDiscriminatorValue.put("messageGetResMsgType29".toUpperCase(), MessageGetResMsgType29.class);
                    classByDiscriminatorValue.put("messageGetResMsgType3".toUpperCase(), MessageGetResMsgType3.class);
                    classByDiscriminatorValue.put("messageGetResMsgType30".toUpperCase(), MessageGetResMsgType30.class);
                    classByDiscriminatorValue.put("messageGetResMsgType31".toUpperCase(), MessageGetResMsgType31.class);
                    classByDiscriminatorValue.put("messageGetResMsgType4".toUpperCase(), MessageGetResMsgType4.class);
                    classByDiscriminatorValue.put("messageGetResMsgType5".toUpperCase(), MessageGetResMsgType5.class);
                    classByDiscriminatorValue.put("messageGetResMsgType6".toUpperCase(), MessageGetResMsgType6.class);
                    classByDiscriminatorValue.put("messageGetResMsgType7".toUpperCase(), MessageGetResMsgType7.class);
                    classByDiscriminatorValue.put("messageGetResMsgType8".toUpperCase(), MessageGetResMsgType8.class);
                    classByDiscriminatorValue.put("messageGetResMsgType9".toUpperCase(), MessageGetResMsgType9.class);
                    classByDiscriminatorValue.put("MessageGetResMsgBase".toUpperCase(), MessageGetResMsgBase.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(MessageGetResMsgBase.class, new PostProcessor<MessageGetResMsgBase>() {
              @Override
              public void postDeserialize(MessageGetResMsgBase result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, MessageGetResMsgBase src, Gson gson) {
                  Map<Class<? extends MessageGetResMsgBase>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(MessageGetResMsgType1.class, "messageGetResMsgType1");
                      discriminatorValueByClass.put(MessageGetResMsgType10.class, "messageGetResMsgType10");
                      discriminatorValueByClass.put(MessageGetResMsgType11.class, "messageGetResMsgType11");
                      discriminatorValueByClass.put(MessageGetResMsgType12.class, "messageGetResMsgType12");
                      discriminatorValueByClass.put(MessageGetResMsgType13.class, "messageGetResMsgType13");
                      discriminatorValueByClass.put(MessageGetResMsgType14.class, "messageGetResMsgType14");
                      discriminatorValueByClass.put(MessageGetResMsgType15.class, "messageGetResMsgType15");
                      discriminatorValueByClass.put(MessageGetResMsgType16.class, "messageGetResMsgType16");
                      discriminatorValueByClass.put(MessageGetResMsgType17.class, "messageGetResMsgType17");
                      discriminatorValueByClass.put(MessageGetResMsgType18.class, "messageGetResMsgType18");
                      discriminatorValueByClass.put(MessageGetResMsgType19.class, "messageGetResMsgType19");
                      discriminatorValueByClass.put(MessageGetResMsgType2.class, "messageGetResMsgType2");
                      discriminatorValueByClass.put(MessageGetResMsgType20.class, "messageGetResMsgType20");
                      discriminatorValueByClass.put(MessageGetResMsgType21.class, "messageGetResMsgType21");
                      discriminatorValueByClass.put(MessageGetResMsgType22.class, "messageGetResMsgType22");
                      discriminatorValueByClass.put(MessageGetResMsgType23.class, "messageGetResMsgType23");
                      discriminatorValueByClass.put(MessageGetResMsgType24.class, "messageGetResMsgType24");
                      discriminatorValueByClass.put(MessageGetResMsgType25.class, "messageGetResMsgType25");
                      discriminatorValueByClass.put(MessageGetResMsgType26.class, "messageGetResMsgType26");
                      discriminatorValueByClass.put(MessageGetResMsgType27.class, "messageGetResMsgType27");
                      discriminatorValueByClass.put(MessageGetResMsgType28.class, "messageGetResMsgType28");
                      discriminatorValueByClass.put(MessageGetResMsgType29.class, "messageGetResMsgType29");
                      discriminatorValueByClass.put(MessageGetResMsgType3.class, "messageGetResMsgType3");
                      discriminatorValueByClass.put(MessageGetResMsgType30.class, "messageGetResMsgType30");
                      discriminatorValueByClass.put(MessageGetResMsgType31.class, "messageGetResMsgType31");
                      discriminatorValueByClass.put(MessageGetResMsgType4.class, "messageGetResMsgType4");
                      discriminatorValueByClass.put(MessageGetResMsgType5.class, "messageGetResMsgType5");
                      discriminatorValueByClass.put(MessageGetResMsgType6.class, "messageGetResMsgType6");
                      discriminatorValueByClass.put(MessageGetResMsgType7.class, "messageGetResMsgType7");
                      discriminatorValueByClass.put(MessageGetResMsgType8.class, "messageGetResMsgType8");
                      discriminatorValueByClass.put(MessageGetResMsgType9.class, "messageGetResMsgType9");
                      discriminatorValueByClass.put(MessageGetResMsgBase.class, "MessageGetResMsgBase");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
