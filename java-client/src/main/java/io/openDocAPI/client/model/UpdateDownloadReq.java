/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * UpdateDownloadReq
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class UpdateDownloadReq {
  @SerializedName("osType")
  private Long osType = null;

  @SerializedName("reqhost")
  private String reqhost = null;

  @SerializedName("usehttps")
  private Boolean usehttps = null;

  public UpdateDownloadReq osType(Long osType) {
    this.osType = osType;
    return this;
  }

   /**
   * 客户端对应的平台  2: android  3: mac  4: windows 32bit  5:windows 64bit  6: office plugin
   * @return osType
  **/
  @Schema(required = true, description = "客户端对应的平台  2: android  3: mac  4: windows 32bit  5:windows 64bit  6: office plugin")
  public Long getOsType() {
    return osType;
  }

  public void setOsType(Long osType) {
    this.osType = osType;
  }

  public UpdateDownloadReq reqhost(String reqhost) {
    this.reqhost = reqhost;
    return this;
  }

   /**
   * 从存储服务器下载数据时的请求地址
   * @return reqhost
  **/
  @Schema(description = "从存储服务器下载数据时的请求地址")
  public String getReqhost() {
    return reqhost;
  }

  public void setReqhost(String reqhost) {
    this.reqhost = reqhost;
  }

  public UpdateDownloadReq usehttps(Boolean usehttps) {
    this.usehttps = usehttps;
    return this;
  }

   /**
   * 是否使用https下载数据，默认为true
   * @return usehttps
  **/
  @Schema(description = "是否使用https下载数据，默认为true")
  public Boolean isUsehttps() {
    return usehttps;
  }

  public void setUsehttps(Boolean usehttps) {
    this.usehttps = usehttps;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDownloadReq updateDownloadReq = (UpdateDownloadReq) o;
    return Objects.equals(this.osType, updateDownloadReq.osType) &&
        Objects.equals(this.reqhost, updateDownloadReq.reqhost) &&
        Objects.equals(this.usehttps, updateDownloadReq.usehttps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osType, reqhost, usehttps);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDownloadReq {\n");
    
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    reqhost: ").append(toIndentedString(reqhost)).append("\n");
    sb.append("    usehttps: ").append(toIndentedString(usehttps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
