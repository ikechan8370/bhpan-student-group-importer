/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * RedirectGethostinfoRes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class RedirectGethostinfoRes {
  @SerializedName("host")
  private String host = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("port")
  private Long port = null;

  @SerializedName("https_port")
  private Long httpsPort = null;

  public RedirectGethostinfoRes host(String host) {
    this.host = host;
    return this;
  }

   /**
   * 系统对外的域名或ip
   * @return host
  **/
  @Schema(required = true, description = "系统对外的域名或ip")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public RedirectGethostinfoRes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 系统对外的站点名称
   * @return name
  **/
  @Schema(required = true, description = "系统对外的站点名称")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RedirectGethostinfoRes port(Long port) {
    this.port = port;
    return this;
  }

   /**
   * http端口：  1. 0918版本之前的客户端使用该端口进行下载客户端  2. 10xx后续的服务器使用该端口来访问视频播放服务
   * @return port
  **/
  @Schema(required = true, description = "http端口：  1. 0918版本之前的客户端使用该端口进行下载客户端  2. 10xx后续的服务器使用该端口来访问视频播放服务")
  public Long getPort() {
    return port;
  }

  public void setPort(Long port) {
    this.port = port;
  }

  public RedirectGethostinfoRes httpsPort(Long httpsPort) {
    this.httpsPort = httpsPort;
    return this;
  }

   /**
   * Web client的服务端口，采用https
   * @return httpsPort
  **/
  @Schema(required = true, description = "Web client的服务端口，采用https")
  public Long getHttpsPort() {
    return httpsPort;
  }

  public void setHttpsPort(Long httpsPort) {
    this.httpsPort = httpsPort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedirectGethostinfoRes redirectGethostinfoRes = (RedirectGethostinfoRes) o;
    return Objects.equals(this.host, redirectGethostinfoRes.host) &&
        Objects.equals(this.name, redirectGethostinfoRes.name) &&
        Objects.equals(this.port, redirectGethostinfoRes.port) &&
        Objects.equals(this.httpsPort, redirectGethostinfoRes.httpsPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, name, port, httpsPort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedirectGethostinfoRes {\n");
    
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    httpsPort: ").append(toIndentedString(httpsPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
