/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * LinkOsdownloadRes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class LinkOsdownloadRes {
  @SerializedName("need_watermark")
  private Boolean needWatermark = null;

  @SerializedName("authrequest")
  private List<String> authrequest = new ArrayList<String>();

  @SerializedName("name")
  private String name = null;

  @SerializedName("rev")
  private String rev = null;

  @SerializedName("size")
  private Long size = null;

  public LinkOsdownloadRes needWatermark(Boolean needWatermark) {
    this.needWatermark = needWatermark;
    return this;
  }

   /**
   * 是否是下载水印文件
   * @return needWatermark
  **/
  @Schema(required = true, description = "是否是下载水印文件")
  public Boolean isNeedWatermark() {
    return needWatermark;
  }

  public void setNeedWatermark(Boolean needWatermark) {
    this.needWatermark = needWatermark;
  }

  public LinkOsdownloadRes authrequest(List<String> authrequest) {
    this.authrequest = authrequest;
    return this;
  }

  public LinkOsdownloadRes addAuthrequestItem(String authrequestItem) {
    this.authrequest.add(authrequestItem);
    return this;
  }

   /**
   * - authrequest[0]：请求方法  - authrequest[1]：资源URL
   * @return authrequest
  **/
  @Schema(required = true, description = "- authrequest[0]：请求方法  - authrequest[1]：资源URL")
  public List<String> getAuthrequest() {
    return authrequest;
  }

  public void setAuthrequest(List<String> authrequest) {
    this.authrequest = authrequest;
  }

  public LinkOsdownloadRes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * 文件名称，UTF8编码
   * @return name
  **/
  @Schema(required = true, description = "文件名称，UTF8编码")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LinkOsdownloadRes rev(String rev) {
    this.rev = rev;
    return this;
  }

   /**
   * 文件版本号
   * @return rev
  **/
  @Schema(required = true, description = "文件版本号")
  public String getRev() {
    return rev;
  }

  public void setRev(String rev) {
    this.rev = rev;
  }

  public LinkOsdownloadRes size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * 当前下载版本的总大小
   * @return size
  **/
  @Schema(required = true, description = "当前下载版本的总大小")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkOsdownloadRes linkOsdownloadRes = (LinkOsdownloadRes) o;
    return Objects.equals(this.needWatermark, linkOsdownloadRes.needWatermark) &&
        Objects.equals(this.authrequest, linkOsdownloadRes.authrequest) &&
        Objects.equals(this.name, linkOsdownloadRes.name) &&
        Objects.equals(this.rev, linkOsdownloadRes.rev) &&
        Objects.equals(this.size, linkOsdownloadRes.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(needWatermark, authrequest, name, rev, size);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkOsdownloadRes {\n");
    
    sb.append("    needWatermark: ").append(toIndentedString(needWatermark)).append("\n");
    sb.append("    authrequest: ").append(toIndentedString(authrequest)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rev: ").append(toIndentedString(rev)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
