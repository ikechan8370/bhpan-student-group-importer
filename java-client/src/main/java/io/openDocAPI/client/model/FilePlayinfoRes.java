/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * FilePlayinfoRes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class FilePlayinfoRes {
  @SerializedName("status")
  private Long status = null;

  @SerializedName("odstat")
  private Long odstat = null;

  @SerializedName("sdstat")
  private Long sdstat = null;

  @SerializedName("docid")
  private String docid = null;

  @SerializedName("remainingTime")
  private Long remainingTime = null;

  public FilePlayinfoRes status(Long status) {
    this.status = status;
    return this;
  }

   /**
   * 转码状态:    0 未开始转码；1 正在转码；2转码完成  
   * @return status
  **/
  @Schema(required = true, description = "转码状态:    0 未开始转码；1 正在转码；2转码完成  ")
  public Long getStatus() {
    return status;
  }

  public void setStatus(Long status) {
    this.status = status;
  }

  public FilePlayinfoRes odstat(Long odstat) {
    this.odstat = odstat;
    return this;
  }

   /**
   * 原始画质（音质）：0无此分辨率；1已转码
   * @return odstat
  **/
  @Schema(required = true, description = "原始画质（音质）：0无此分辨率；1已转码")
  public Long getOdstat() {
    return odstat;
  }

  public void setOdstat(Long odstat) {
    this.odstat = odstat;
  }

  public FilePlayinfoRes sdstat(Long sdstat) {
    this.sdstat = sdstat;
    return this;
  }

   /**
   * 标清：0无此分辨率；1已转码
   * @return sdstat
  **/
  @Schema(required = true, description = "标清：0无此分辨率；1已转码")
  public Long getSdstat() {
    return sdstat;
  }

  public void setSdstat(Long sdstat) {
    this.sdstat = sdstat;
  }

  public FilePlayinfoRes docid(String docid) {
    this.docid = docid;
    return this;
  }

   /**
   * 转码文件的唯一标识id，转码完成至少一种分辨率，认为完成转码，返回转码文件的id
   * @return docid
  **/
  @Schema(required = true, description = "转码文件的唯一标识id，转码完成至少一种分辨率，认为完成转码，返回转码文件的id")
  public String getDocid() {
    return docid;
  }

  public void setDocid(String docid) {
    this.docid = docid;
  }

  public FilePlayinfoRes remainingTime(Long remainingTime) {
    this.remainingTime = remainingTime;
    return this;
  }

   /**
   * 转码剩余时间（秒），status为1时返回
   * @return remainingTime
  **/
  @Schema(description = "转码剩余时间（秒），status为1时返回")
  public Long getRemainingTime() {
    return remainingTime;
  }

  public void setRemainingTime(Long remainingTime) {
    this.remainingTime = remainingTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilePlayinfoRes filePlayinfoRes = (FilePlayinfoRes) o;
    return Objects.equals(this.status, filePlayinfoRes.status) &&
        Objects.equals(this.odstat, filePlayinfoRes.odstat) &&
        Objects.equals(this.sdstat, filePlayinfoRes.sdstat) &&
        Objects.equals(this.docid, filePlayinfoRes.docid) &&
        Objects.equals(this.remainingTime, filePlayinfoRes.remainingTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, odstat, sdstat, docid, remainingTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilePlayinfoRes {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    odstat: ").append(toIndentedString(odstat)).append("\n");
    sb.append("    sdstat: ").append(toIndentedString(sdstat)).append("\n");
    sb.append("    docid: ").append(toIndentedString(docid)).append("\n");
    sb.append("    remainingTime: ").append(toIndentedString(remainingTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
