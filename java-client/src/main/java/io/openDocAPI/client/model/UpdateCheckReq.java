/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * UpdateCheckReq
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class UpdateCheckReq {
  /**
   * 客户端对应的平台
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    WINDOWS("windows"),
    MAC("mac");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PlatformEnum fromValue(String text) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlatformEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("platform")
  private PlatformEnum platform = null;

  @SerializedName("arch")
  private String arch = null;

  @SerializedName("version")
  private String version = null;

  public UpdateCheckReq platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

   /**
   * 客户端对应的平台
   * @return platform
  **/
  @Schema(required = true, description = "客户端对应的平台")
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }

  public UpdateCheckReq arch(String arch) {
    this.arch = arch;
    return this;
  }

   /**
   * 客户端的操作系统架构，现在windows只支持“x86”和“x64”， mac平台忽略该字段
   * @return arch
  **/
  @Schema(required = true, description = "客户端的操作系统架构，现在windows只支持“x86”和“x64”， mac平台忽略该字段")
  public String getArch() {
    return arch;
  }

  public void setArch(String arch) {
    this.arch = arch;
  }

  public UpdateCheckReq version(String version) {
    this.version = version;
    return this;
  }

   /**
   * 客户端程序的版本，为3.5.3.244形式（主版本号，小版本号，修订号，构建号）
   * @return version
  **/
  @Schema(required = true, description = "客户端程序的版本，为3.5.3.244形式（主版本号，小版本号，修订号，构建号）")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCheckReq updateCheckReq = (UpdateCheckReq) o;
    return Objects.equals(this.platform, updateCheckReq.platform) &&
        Objects.equals(this.arch, updateCheckReq.arch) &&
        Objects.equals(this.version, updateCheckReq.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(platform, arch, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCheckReq {\n");
    
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
