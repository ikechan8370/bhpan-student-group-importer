/*
 * 6.0-OpenDoc_API-文档访问
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * OpenAPI spec version: 6.0.10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.openDocAPI.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.openDocAPI.client.model.ConfigGetResCache;
import io.openDocAPI.client.model.ConfigGetResLocalsync;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ConfigGetRes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-06-28T09:01:49.177Z[Etc/UTC]")
public class ConfigGetRes {
  @SerializedName("cache")
  private List<ConfigGetResCache> cache = new ArrayList<ConfigGetResCache>();

  @SerializedName("detect_interval")
  private Long detectInterval = null;

  @SerializedName("localsync")
  private ConfigGetResLocalsync localsync = null;

  @SerializedName("needquickstart")
  private Boolean needquickstart = null;

  public ConfigGetRes cache(List<ConfigGetResCache> cache) {
    this.cache = cache;
    return this;
  }

  public ConfigGetRes addCacheItem(ConfigGetResCache cacheItem) {
    this.cache.add(cacheItem);
    return this;
  }

   /**
   * 缓存相关配置信息
   * @return cache
  **/
  @Schema(required = true, description = "缓存相关配置信息")
  public List<ConfigGetResCache> getCache() {
    return cache;
  }

  public void setCache(List<ConfigGetResCache> cache) {
    this.cache = cache;
  }

  public ConfigGetRes detectInterval(Long detectInterval) {
    this.detectInterval = detectInterval;
    return this;
  }

   /**
   * 客户端探测时间
   * @return detectInterval
  **/
  @Schema(required = true, description = "客户端探测时间")
  public Long getDetectInterval() {
    return detectInterval;
  }

  public void setDetectInterval(Long detectInterval) {
    this.detectInterval = detectInterval;
  }

  public ConfigGetRes localsync(ConfigGetResLocalsync localsync) {
    this.localsync = localsync;
    return this;
  }

   /**
   * Get localsync
   * @return localsync
  **/
  @Schema(required = true, description = "")
  public ConfigGetResLocalsync getLocalsync() {
    return localsync;
  }

  public void setLocalsync(ConfigGetResLocalsync localsync) {
    this.localsync = localsync;
  }

  public ConfigGetRes needquickstart(Boolean needquickstart) {
    this.needquickstart = needquickstart;
    return this;
  }

   /**
   * 快速入门文档阅读状态
   * @return needquickstart
  **/
  @Schema(required = true, description = "快速入门文档阅读状态")
  public Boolean isNeedquickstart() {
    return needquickstart;
  }

  public void setNeedquickstart(Boolean needquickstart) {
    this.needquickstart = needquickstart;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigGetRes configGetRes = (ConfigGetRes) o;
    return Objects.equals(this.cache, configGetRes.cache) &&
        Objects.equals(this.detectInterval, configGetRes.detectInterval) &&
        Objects.equals(this.localsync, configGetRes.localsync) &&
        Objects.equals(this.needquickstart, configGetRes.needquickstart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cache, detectInterval, localsync, needquickstart);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigGetRes {\n");
    
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    detectInterval: ").append(toIndentedString(detectInterval)).append("\n");
    sb.append("    localsync: ").append(toIndentedString(localsync)).append("\n");
    sb.append("    needquickstart: ").append(toIndentedString(needquickstart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
